// RH_RF95 - Adafruit Feather 32u4 LoRa - receive a structure 

// -*- mode: C++ -*-
// Example sketch showing how to create a simple messaging client (receiver)
// with the RH_RF95 class. RH_RF95 class does not provide for addressing or
// reliability, so you should only use RH_RF95 if you do not need the higher
// level messaging abilities.
// It is designed to work with the other example Feather9x_TX

#include <SPI.h>
#include <RH_RF95.h>

struct __attribute__((packed)) BME280 {
  byte StructureID;  // identifies the structure type
  byte NodeID;       // ID of transmitting node
  int16_t seq;       // sequence number
  float temperature;
  float pressure;
  float altitude;
} bme280;

struct __attribute__((packed)) accelerometer {
  byte StructureID;  // identifies the structure type
  byte NodeID;       // ID of transmitting node
  int16_t seq;       // sequence number
  float x;
  float y;
  float z;
} accelerometer;
/* for feather32u4 */
#define RFM95_CS 10
#define RFM95_RST 2
#define RFM95_INT 3

/* for feather m0  
#define RFM95_CS 8
#define RFM95_RST 4
#define RFM95_INT 3
*/

/* for shield 
#define RFM95_CS 10
#define RFM95_RST 9
#define RFM95_INT 2
*/


/* for ESP w/featherwing 
#define RFM95_CS  2    // "E"
#define RFM95_RST 16   // "D"
#define RFM95_INT 15   // "B"
*/

/* Feather 32u4 w/wing
#define RFM95_RST     11   // "A"
#define RFM95_CS      10   // "B"
#define RFM95_INT     2    // "SDA" (only SDA/SCL/RX/TX have IRQ!)
*/

/* Feather m0 w/wing 
#define RFM95_RST     11   // "A"
#define RFM95_CS      10   // "B"
#define RFM95_INT     6    // "D"
*/

/* Teensy 3.x w/wing 
#define RFM95_RST     9   // "A"
#define RFM95_CS      10   // "B"
#define RFM95_INT     4    // "C"
*/

// Change to 434.0 or other frequency, must match RX's freq!
#define RF95_FREQ 868.0

// Singleton instance of the radio driver
RH_RF95 rf95(RFM95_CS, RFM95_INT);

// Blinky on receipt
#define LED 13

void setup() {
  pinMode(LED, OUTPUT);
  pinMode(RFM95_RST, OUTPUT);
  digitalWrite(RFM95_RST, HIGH);

  while (!Serial)
    ;
  Serial.begin(115200);
  delay(100);

  Serial.println("Feather LoRa RX Test!");

  // manual reset
  digitalWrite(RFM95_RST, LOW);
  delay(10);
  digitalWrite(RFM95_RST, HIGH);
  delay(10);

  while (!rf95.init()) {
    Serial.println("LoRa radio init failed");
    while (1)
      ;
  }
  Serial.println("LoRa radio init OK!");

  // Defaults after init are 434.0MHz, modulation GFSK_Rb250Fd250, +13dbM
  if (!rf95.setFrequency(RF95_FREQ)) {
    Serial.println("setFrequency failed");
    while (1)
      ;
  }
  Serial.print("Set Freq to: ");
  Serial.println(RF95_FREQ);

  // Defaults after init are 434.0MHz, 13dBm, Bw = 125 kHz, Cr = 4/5, Sf = 128chips/symbol, CRC on

  // The default transmitter power is 13dBm, using PA_BOOST.
  // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then
  // you can set transmitter powers from 5 to 23 dBm:
  rf95.setTxPower(23, false);
}

void loop() {
  if (rf95.available()) {
    // Should be a message for us now
    uint8_t buf[RH_RF95_MAX_MESSAGE_LEN];
    uint8_t len = sizeof(bme280);
    //uint8_t len2 = sizeof(accelerometer);

    if (rf95.recv((byte *)&bme280, &len)) {
      digitalWrite(LED, HIGH);
      RH_RF95::printBuffer("Received: ", (byte *)&bme280, len);
      if(len != sizeof(bme280)) {
        Serial.println("***** packet wrong length! *****");
        return;
      }
      Serial.print("RSSI: ");
      Serial.print(rf95.lastRssi(), DEC);
      Serial.print(" seq ");
      Serial.print(bme280.seq);
      Serial.print(" Temperature = ");
      Serial.print(bme280.temperature);
      Serial.print("*C ");
      // Convert temperature to Fahrenheit
      Serial.print(1.8 * bme280.temperature + 32);
      Serial.print("*F");
      Serial.print(" Pressure = ");
      Serial.print(bme280.pressure);
      Serial.print("hPa");
      Serial.print(" Approx. Altitude = ");
      Serial.print(bme280.altitude);
      Serial.print("m");
      delay(10);
      static int16_t seqExpected = 0, seqErrors = 0;
      if (bme280.seq != seqExpected) {  // check for sequence error!
        Serial.print(" ***** seq number error expected ");
        Serial.print(seqExpected);
        Serial.print(" received ");
        Serial.print(bme280.seq);
        Serial.print("  seq  errors ");
        Serial.println(++seqErrors);
        seqExpected = bme280.seq;
      }
      seqExpected++;  // next sequence nunber expected

      // Send a reply
      delay(200);  // may or may not be needed
      uint8_t data[] = "receive OK";
      rf95.send(data, sizeof(data));
      rf95.waitPacketSent();
      Serial.println("Sent a reply");
      digitalWrite(LED, LOW);
    } else {
      Serial.println("Receive failed");
    }
  }

   if (rf95.recv((byte *)&accelerometer, sizeof(accelerometer))) {
      digitalWrite(LED, HIGH);
      RH_RF95::printBuffer("Received: ", (byte *)&accelerometer, sizeof(accelerometer));
      // if(len2 != sizeof(accelerometer)) {
      //   Serial.println("***** packet wrong length! *****");
      //   return;
      // }
      Serial.print("RSSI: ");
      Serial.print(rf95.lastRssi(), DEC);
      Serial.print(" seq ");
      Serial.print(accelerometer.seq);
      Serial.print(" acc x = ");
      Serial.print(accelerometer.x);
       Serial.print(" acc y = ");
      Serial.print(accelerometer.y);
       Serial.print(" acc z = ");
      Serial.print(accelerometer.z);
      
      delay(10);
      static int16_t seqExpected_2 = 1, seqErrors_2 = 0;
      if (bme280.seq != seqExpected_2) {  // check for sequence error!
        Serial.print(" ***** seq number error expected ");
        Serial.print(seqExpected_2);
        Serial.print(" received ");
        Serial.print(accelerometer.seq);
        Serial.print("  seq  errors ");
        Serial.println(++seqErrors_2);
        seqExpected_2 = accelerometer.seq;
      }
      seqExpected_2++;  // next sequence nunber expected

      // Send a reply
      delay(200);  // may or may not be needed
      uint8_t data[] = "receive OK";
      rf95.send(data, sizeof(data));
      rf95.waitPacketSent();
      Serial.println("Sent a reply");
      digitalWrite(LED, LOW);
    } else {
      Serial.println("Receive failed");
    }
  }
